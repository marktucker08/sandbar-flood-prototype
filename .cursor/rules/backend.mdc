---
description: 
globs: *.ts
alwaysApply: false
---

# Your rule content

- Always validate API inputs before processing requests.
- Use async/await consistently; avoid callbacks.
- Follow RESTful API conventions for clear endpoint structures.
- Optimize database queries for performance and scalability.
- Log errors properly but avoid excessive debugging logs in production.

## Database Schema

### Users Table
```sql
CREATE TABLE Users (
    UserID INT PRIMARY KEY,
    AgencyID INT,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Role ENUM('agent', 'agency-admin', 'super-admin', 'sandbar-employee' ) NOT NULL,
    CompanyName VARCHAR(100),
    PhoneNumber VARCHAR(20),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LastLogin TIMESTAMP,
    FOREIGN KEY (AgencyID) REFERENCES Agency(AgencyID)
);
```

### Agency Table
```sql
CREATE TABLE Agency (
    AgencyID INT PRIMARY KEY,
    MainContactEmail VARCHAR(255) NOT NULL,
    MainContactFirstName VARCHAR(50),
    MainContactLastName VARCHAR(50),
    CompanyName VARCHAR(100) NOT NULL,
    MainPhoneNumber VARCHAR(20),
    StreetAddress VARCHAR(255),
    AddressLine2 VARCHAR(255),
    City VARCHAR(100),
    State VARCHAR(50),
    ZipCode VARCHAR(10)
);
```

### InsuredClients Table
```sql
CREATE TABLE InsuredClients (
    ClientID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(255),
    PhoneNumber VARCHAR(20),
    InsuredType ENUM('individual', 'business') NOT NULL,
    BusinessName VARCHAR(100),
    EntityType ENUM('individual', 'corporation', 'partnership', 'llc', 'limited_partnership', 'unlimited_llc', 'unlimited_partnership', 'other'),
    AdditionalInsuredName VARCHAR(100),
    Address VARCHAR(255),
    AddressLine2 VARCHAR(255),
    City VARCHAR(100),
    State VARCHAR(50),
    ZipCode VARCHAR(10),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CreatedBy INT,
    FOREIGN KEY (CreatedBy) REFERENCES Users(UserID),
    CONSTRAINT chk_business_entity 
        CHECK (
            (InsuredType = 'business' AND BusinessName IS NOT NULL AND EntityType IS NOT NULL) OR
            (InsuredType = 'individual' AND FirstName IS NOT NULL AND LastName IS NOT NULL)
        )
);

CREATE INDEX idx_insured_name ON InsuredClients(FirstName, LastName);
CREATE INDEX idx_business_name ON InsuredClients(BusinessName);
CREATE INDEX idx_insured_email ON InsuredClients(Email);
CREATE INDEX idx_insured_zip ON InsuredClients(ZipCode);
```

### Properties Table
```sql
CREATE TABLE Properties (
    PropertyID INT PRIMARY KEY,
    ClientID INT,
    Address VARCHAR(255),
    City VARCHAR(100),
    State VARCHAR(50),
    ZipCode VARCHAR(10),
    FloodZone VARCHAR(10),
    BuildingType VARCHAR(50),
    YearBuilt INT,
    SquareFootage INT,
    NumberOfFloors INT,
    BasementType VARCHAR(50),
    OccupancyType ENUM('primary', 'secondary', 'seasonal', 'rental'),
    WaitingPeriod ENUM('standard', 'loan'),
    NumberOfStories INT,
    NumberOfFamilies INT,
    FoundationType ENUM('slab', 'raised', 'unfinished', 'finished', 'pilings-enclosure', 'pilings-no-enclosure', 'full-wall'),
    ConstructionType ENUM('frame', 'masonry', 'superior'),
    ConstructionDocs VARCHAR(255),
    FOREIGN KEY (ClientID) REFERENCES InsuredClients(ClientID)
);
```

### Quotes Table
```sql
CREATE TABLE Quotes (
    QuoteID INT PRIMARY KEY,
    PropertyID INT,
    UserID INT,
    Status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    CoverageAmount DECIMAL(10, 2),
    Premium DECIMAL(10, 2),
    Deductible DECIMAL(10, 2),
    EffectiveDate DATE,
    ExpirationDate DATE,
    WaitingPeriodType ENUM('standard', 'loan'),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP,
    FOREIGN KEY (PropertyID) REFERENCES Properties(PropertyID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);
```

### Policies Table
```sql
CREATE TABLE Policies (
    PolicyID INT PRIMARY KEY,
    QuoteID INT,
    PolicyNumber VARCHAR(50) UNIQUE,
    Status ENUM('active', 'cancelled', 'expired') DEFAULT 'active',
    EffectiveDate DATE,
    ExpirationDate DATE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP,
    FOREIGN KEY (QuoteID) REFERENCES Quotes(QuoteID)
);
```

### Inspections Table
```sql
CREATE TABLE Inspections (
    InspectionID INT PRIMARY KEY,
    PolicyID INT,
    InspectorName VARCHAR(100),
    ScheduledDate DATE,
    Status ENUM('scheduled', 'completed', 'cancelled') DEFAULT 'scheduled',
    Results TEXT,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP,
    FOREIGN KEY (PolicyID) REFERENCES Policies(PolicyID)
);
```

### RatingTables Table
```sql
CREATE TABLE RatingTables (
    RatingTableID INT PRIMARY KEY,
    TableName VARCHAR(100),
    EffectiveDate DATE,
    ExpirationDate DATE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP
);
```

### RatingFactors Table
```sql
CREATE TABLE RatingFactors (
    RatingFactorID INT PRIMARY KEY,
    RatingTableID INT,
    FactorName VARCHAR(100),
    FactorValue DECIMAL(10, 4),
    FOREIGN KEY (RatingTableID) REFERENCES RatingTables(RatingTableID)
);
```

### AuditLogs Table
```sql
CREATE TABLE AuditLogs (
    LogID INT PRIMARY KEY,
    UserID INT,
    Action VARCHAR(255),
    TableName VARCHAR(100),
    RecordID INT,
    OldValue TEXT,
    NewValue TEXT,
    Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);
```

### Coverage Table
```sql
CREATE TABLE Coverage (
    CoverageID INT PRIMARY KEY,
    QuoteID INT,
    BuildingReplacementCost DECIMAL(10, 2),
    ContentsReplacementCost DECIMAL(10, 2),
    BuildingCoverage DECIMAL(10, 2),
    ContentsCoverage DECIMAL(10, 2),
    LossOfUseCoverage DECIMAL(10, 2),
    Deductible DECIMAL(10, 2),
    FOREIGN KEY (QuoteID) REFERENCES Quotes(QuoteID)
);

ALTER TABLE Coverage ADD CONSTRAINT check_coverage_limits 
CHECK (BuildingCoverage <= BuildingReplacementCost 
   AND ContentsCoverage <= ContentsReplacementCost);
```

### Documents Table
```sql
CREATE TABLE Documents (
    DocumentID INT PRIMARY KEY,
    PropertyID INT,
    DocumentType ENUM('construction', 'elevation', 'inspection', 'other'),
    FilePath VARCHAR(255),
    UploadedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UploadedBy INT,
    FOREIGN KEY (PropertyID) REFERENCES Properties(PropertyID),
    FOREIGN KEY (UploadedBy) REFERENCES Users(UserID)
);
```

Optional Table
### Coverage History Table 
```sql
CREATE TABLE CoverageHistory (
    HistoryID INT PRIMARY KEY,
    CoverageID INT,
    ChangeType VARCHAR(50),
    OldValue JSON,
    NewValue JSON,
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ChangedBy INT,
    FOREIGN KEY (CoverageID) REFERENCES Coverage(CoverageID),
    FOREIGN KEY (ChangedBy) REFERENCES Users(UserID)
);
```

